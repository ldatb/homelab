- name: Disable swap
  command: swapoff -a

- name: Allow br_netfilter module to load
  template:
    src: modules-k8s-conf.j2
    dest: "/etc/modules-load.d/k8s.conf"

- name: Add Kubernetes GPG keys
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
 
- name: Add Kubernetes repository into sources list
  apt_repository:
    filename: kubernetes.list
    repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    state: present

- name: Install Kubernetes
  apt:
    name:
    - kubelet={{ k8s_version }}
    - kubeadm={{ k8s_version }}
    - kubectl={{ k8s_version }}
    state: present
    update-cache: yes

- name: Prevent Kubernetes packages from being upgraded
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Create IPv4 and IPv6 configs for Kubernetes
  template:
    src: sysctl-k8s-conf.j2
    dest: "/etc/sysctl.d/k8s.conf"

- name: Apply sysctl params without reboot
  command: sysctl --system

- name: Create Cluster
  command: kubeadm init --pod-network-cidr 10.244.0.0/16

- name: Give kubectl rights to another user than root - Create directory
  file:
    path: .kube
    state: directory
  become: true
  become_user: "{{ ansible_user }}"

- name: Give kubectl rights to another user than root - Copy config files
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: .kube/config
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: Untaint nodes - Master
  command: kubectl taint nodes --all node-role.kubernetes.io/master-
  become: true
  become_user: "{{ ansible_user }}"

- name: Wait for all control-plane pods become created
  command: "kubectl get pods --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
  register: control_plane_pods_created
  until: item in control_plane_pods_created.stdout
  retries: 10
  delay: 30
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: Wait until all kube-system control-plane pods are running
  command: kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane --timeout=600s
  register: control_plane_pods_ready
- debug: var=control_plane_pods_ready.stdout_lines

- name: Install Calico for networking
  include_tasks: calico.yml
